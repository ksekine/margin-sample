{"version":3,"sources":["components/molecules/Navigation.tsx","components/molecules/TableContent.tsx","components/pages/Margin.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ProjectName","styled","h2","Ul","ul","List","li","Navigation","TableContent","props","TableContainer","component","Paper","Table","TableHead","TableRow","TableCell","TableBody","rows","map","row","key","marginRate","exchangeRate","profitAndLoss","Title","h1","Form","form","FormContainer","div","FieldContainer","ErrorContainer","radioList","Margin","marginRateList","useState","data","setData","useForm","register","handleSubmit","control","errors","onSubmit","depositeMargin","executionRate","quantity","leverage","position","tmpData","calcExchangeRate","push","TextField","inputRef","required","label","name","variant","FormLabel","as","RadioGroup","item","FormControlLabel","value","Radio","color","defaultValue","Button","type","Enclosure","Nav","Main","main","MainContainer","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8982c561.chunk.js","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\n\nconst ProjectName = styled.h2`\n  font-weight: 500;\n  margin-top: 40px;\n  margin-left: 30px;\n  margin-bottom: 40px;\n`;\n\nconst Ul = styled.ul`\n  padding-left: 30px;\n`;\n\nconst List = styled.li`\n  line-height: 2.5;\n  list-style: none;\n`;\n\nconst Navigation: React.FC = () => {\n  return (\n    <>\n      <ProjectName>FX support</ProjectName>\n      <nav>\n        <Ul>\n          <List>証拠金維持率計算</List>\n          <List>証拠金維持率計算</List>\n          <List>証拠金維持率計算</List>\n        </Ul>\n      </nav>\n    </>\n  );\n};\n\nexport default Navigation;\n","import React from \"react\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Paper from \"@material-ui/core/Paper\";\n\ninterface Data {\n  marginRate: number;\n  exchangeRate: number;\n  profitAndLoss: number;\n}\n\ntype Props = {\n  rows: Data[];\n};\n\nconst TableContent: React.FC<Props> = (props: Props) => {\n  return (\n    <TableContainer component={Paper}>\n      <Table>\n        <TableHead>\n          <TableRow>\n            <TableCell>証拠金維持率</TableCell>\n            <TableCell>レート</TableCell>\n            <TableCell>損益額</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {props.rows.map((row) => {\n            return (\n              <TableRow key={row.marginRate}>\n                <TableCell>{row.marginRate * 100} %</TableCell>\n                <TableCell>{row.exchangeRate}</TableCell>\n                <TableCell>{row.profitAndLoss}</TableCell>\n              </TableRow>\n            );\n          })}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n};\n\nexport default TableContent;\n","import React, { useState } from \"react\";\nimport { useForm, Controller } from \"react-hook-form\";\nimport {\n  TextField,\n  FormLabel,\n  FormControlLabel,\n  Radio,\n  RadioGroup,\n  Button,\n} from \"@material-ui/core\";\nimport styled from \"styled-components\";\nimport TableContent from \"../molecules/TableContent\";\n\nconst Title = styled.h1`\n  margin: 3rem auto;\n  font-weight: 500;\n`;\n\nconst Form = styled.form`\n  margin-top: 50px;\n  margin-bottom: 50px;\n`;\n\nconst FormContainer = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n`;\n\nconst FieldContainer = styled.div`\n  margin-right: 30px;\n  margin-bottom: 30px;\n`;\n\nconst ErrorContainer = styled.div`\n  font-size: 12px;\n  color: red;\n  margin-top: 10px;\n  margin-bottom: 10px;\n`;\n\nconst TableContainer = styled.div`\n  margin-bottom: 50px;\n`;\n\ntype FormData = {\n  depositeMargin: number;\n  executionRate: number;\n  quantity: number;\n  leverage: number;\n  position: string;\n};\n\ninterface Data {\n  marginRate: number;\n  exchangeRate: number;\n  profitAndLoss: number;\n}\n\nconst radioList: string[] = [\"買い\", \"売り\"];\n\nconst calcExchangeRate = (\n  position: string,\n  marginRate: number,\n  leverage: number,\n  executionRate: number,\n  depositeMargin: number,\n  quantity: number\n) => {\n  let exchangeRate: number;\n  let profitAndLoss: number;\n\n  if (position === radioList[0]) {\n    exchangeRate =\n      (1.0 + marginRate / leverage) * executionRate - depositeMargin / quantity;\n    profitAndLoss = (exchangeRate - executionRate) * quantity;\n  } else {\n    exchangeRate =\n      (1.0 - marginRate / leverage) * executionRate + depositeMargin / quantity;\n    profitAndLoss = (executionRate - exchangeRate) * quantity;\n  }\n\n  return {\n    exchangeRate,\n    profitAndLoss,\n  };\n};\n\nconst Margin: React.FC = () => {\n  const marginRateList = [0.3, 0.5, 1.0, 1.5, 2.0, 4.0, 5.0];\n  const [data, setData] = useState<Data[]>([]);\n  const { register, handleSubmit, control, errors } = useForm<FormData>();\n  const onSubmit = handleSubmit(\n    ({ depositeMargin, executionRate, quantity, leverage, position }) => {\n      const tmpData: Data[] = [];\n      marginRateList.map((marginRate) => {\n        const { exchangeRate, profitAndLoss } = calcExchangeRate(\n          position,\n          marginRate,\n          leverage,\n          executionRate,\n          depositeMargin,\n          quantity\n        );\n\n        tmpData.push({\n          marginRate,\n          exchangeRate,\n          profitAndLoss,\n        });\n      });\n\n      setData(tmpData);\n    }\n  );\n\n  return (\n    <>\n      <Title>証拠金維持率計算</Title>\n      <Form onSubmit={onSubmit}>\n        <FormContainer>\n          <FieldContainer>\n            <TextField\n              inputRef={register({ required: true })}\n              label=\"預入証拠金\"\n              name=\"depositeMargin\"\n              variant=\"outlined\"\n            />\n            <ErrorContainer>\n              {errors.depositeMargin && <div>This field is required</div>}\n            </ErrorContainer>\n          </FieldContainer>\n\n          <FieldContainer>\n            <TextField\n              inputRef={register({ required: true })}\n              label=\"約定レート\"\n              name=\"executionRate\"\n              variant=\"outlined\"\n            />\n            <ErrorContainer>\n              {errors.executionRate && <div>This field is required</div>}\n            </ErrorContainer>\n          </FieldContainer>\n\n          <FieldContainer>\n            <TextField\n              inputRef={register({ required: true })}\n              label=\"取引数量\"\n              name=\"quantity\"\n              variant=\"outlined\"\n            />\n            <ErrorContainer>\n              {errors.quantity && <div>This field is required</div>}\n            </ErrorContainer>\n          </FieldContainer>\n\n          <FieldContainer>\n            <TextField\n              inputRef={register({ required: true })}\n              label=\"レバレッジ\"\n              name=\"leverage\"\n              variant=\"outlined\"\n            />\n            <ErrorContainer>\n              {errors.leverage && <div>This field is required</div>}\n            </ErrorContainer>\n          </FieldContainer>\n        </FormContainer>\n\n        <FieldContainer>\n          <FormLabel>ポジション</FormLabel>\n          <Controller\n            name=\"position\"\n            as={\n              <RadioGroup row>\n                {radioList.map((item) => (\n                  <FormControlLabel\n                    key={item}\n                    value={item}\n                    control={<Radio color=\"default\" />}\n                    label={item}\n                  />\n                ))}\n              </RadioGroup>\n            }\n            control={control}\n            defaultValue={radioList[0]}\n          />\n        </FieldContainer>\n\n        <Button type=\"submit\" variant=\"outlined\" color=\"primary\">\n          計算\n        </Button>\n      </Form>\n\n      <TableContainer>\n        <TableContent rows={data} />\n      </TableContainer>\n    </>\n  );\n};\n\nexport default Margin;\n","import React from \"react\";\nimport Navigation from \"./components/molecules/Navigation\";\nimport Margin from \"./components/pages/Margin\";\nimport styled from \"styled-components\";\n\nconst Enclosure = styled.div`\n  display: grid;\n  position: relative;\n  grid-template-columns: 240px 1fr;\n  grid-template-rows: auto;\n`;\n\nconst Nav = styled.div`\n  display: block;\n  position: fixed;\n  top: 0;\n  width: 240px;\n  overflow-y: auto;\n  height: 100%;\n  background-color: #05264c;\n  color: #fff;\n`;\n\nconst Main = styled.main`\n  width: 100%;\n  display: block;\n  grid-column: 2/3;\n  overflow: hidden;\n`;\n\nconst MainContainer = styled.div`\n  padding-left: 40px;\n  padding-right: 40px;\n`;\n\nconst App: React.FC = () => {\n  return (\n    <Enclosure>\n      <Nav>\n        <Navigation />\n      </Nav>\n      <Main>\n        <MainContainer>\n          <Margin />\n        </MainContainer>\n      </Main>\n    </Enclosure>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}