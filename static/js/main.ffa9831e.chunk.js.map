{"version":3,"sources":["styles.tsx","components/molecules/Navigation.tsx","components/molecules/TableContent.tsx","components/pages/Margin.tsx","components/pages/MarginDocument.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["minWidth","device","tablet","laptop","HeaderContainer","styled","header","Header","div","ProjectName","h2","MenuButton","button","Nav","nav","props","open","Ul","ul","List","li","Navigation","useState","setOpen","href","icon","faGithub","size","onClick","faTimes","faBars","to","StyledCell","TableCell","TableContent","TableContainer","Table","TableHead","TableRow","TableBody","rows","map","row","key","marginRate","exchangeRate","toLocaleString","profitAndLoss","Title","h1","Form","form","FormContainer","FieldContainer","ErrorContainer","RequiredContainer","RequiredText","radioList","Margin","marginRateList","data","setData","required","setRequired","useForm","register","handleSubmit","control","errors","onSubmit","depositeMargin","execRate","quantity","leverage","position","tmpData","Math","round","floor","calcExchangeRate","push","req","ceil","TextField","inputRef","label","name","variant","type","FormLabel","as","RadioGroup","item","FormControlLabel","value","Radio","color","defaultValue","Button","MarginDocument","Enclosure","NavContainer","Main","main","MainContainer","App","StylesProvider","injectFirst","path","exact","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ffa9831e.chunk.js","sourcesContent":["const minWidth = {\n  tablet: \"481px\",\n  laptop: \"769px\",\n};\n\nexport const device = {\n  tablet: `(min-width: ${minWidth.tablet})`,\n  laptop: `(min-width: ${minWidth.laptop})`,\n};\n","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport { Link } from \"react-router-dom\";\nimport { device } from \"../../styles\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faGithub } from \"@fortawesome/free-brands-svg-icons\";\nimport { faBars } from \"@fortawesome/free-solid-svg-icons\";\nimport { faTimes } from \"@fortawesome/free-solid-svg-icons\";\n\nconst HeaderContainer = styled.header`\n  display: flex;\n  align-items: center;\n\n  @media ${device.laptop} {\n    display: inline;\n  }\n`;\n\nconst Header = styled.div`\n  display: flex;\n  align-items: center;\n  width: 100%;\n\n  @media ${device.laptop} {\n    margin-bottom: 40px;\n  }\n`;\n\nconst ProjectName = styled.h2`\n  margin: 0px;\n  font-weight: 500;\n  font-size: 20px;\n  padding-right: 20px;\n`;\n\nconst MenuButton = styled.button`\n  width: 100%;\n  text-align: right;\n\n  @media ${device.laptop} {\n    display: none;\n  }\n`;\n\ninterface NavProps {\n  open: boolean;\n}\n\nconst Nav = styled.nav<NavProps>`\n  display: ${(props) => (props.open ? \"inline\" : \"none\")};\n\n  @media ${device.laptop} {\n    display: inline;\n  }\n`;\n\nconst Ul = styled.ul`\n  padding: 0px;\n  margin-bottom: 0px;\n`;\n\nconst List = styled.li`\n  line-height: 2.5;\n  list-style: none;\n`;\n\nconst Navigation: React.FC = () => {\n  const [open, setOpen] = useState<boolean>(false);\n  const onClick = () => {\n    setOpen(!open);\n  };\n\n  return (\n    <>\n      <HeaderContainer>\n        <Header>\n          <ProjectName>FX support</ProjectName>\n          <a href=\"https://github.com/kz665432/margin-sample\">\n            <FontAwesomeIcon icon={faGithub} size=\"2x\" />\n          </a>\n        </Header>\n\n        <MenuButton onClick={onClick}>\n          {open ? (\n            <FontAwesomeIcon icon={faTimes} size=\"2x\" />\n          ) : (\n            <FontAwesomeIcon icon={faBars} size=\"2x\" />\n          )}\n        </MenuButton>\n      </HeaderContainer>\n\n      <Nav open={open}>\n        <Ul>\n          <List>\n            <Link to=\"/margin-sample\">証拠金維持率計算</Link>\n          </List>\n          <List>\n            <Link to=\"/margin-sample/document\">計算方法</Link>\n          </List>\n        </Ul>\n      </Nav>\n    </>\n  );\n};\n\nexport default Navigation;\n","import React from \"react\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport styled from \"styled-components\";\n\nconst StyledCell = styled(TableCell)`\n  font-size: 1rem;\n`;\n\ninterface Data {\n  marginRate: number;\n  exchangeRate: number;\n  profitAndLoss: number;\n}\n\ntype Props = {\n  rows: Data[];\n};\n\nconst TableContent: React.FC<Props> = (props: Props) => {\n  return (\n    <TableContainer>\n      <Table>\n        <TableHead>\n          <TableRow>\n            <StyledCell>証拠金維持率</StyledCell>\n            <StyledCell>レート</StyledCell>\n            <StyledCell>損益額</StyledCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {props.rows.map((row) => {\n            return (\n              <TableRow key={row.marginRate}>\n                <StyledCell>{row.marginRate * 100} %</StyledCell>\n                <StyledCell>\n                  {row.exchangeRate >= 0\n                    ? row.exchangeRate.toLocaleString()\n                    : \"-\"}\n                </StyledCell>\n                <StyledCell>\n                  {row.exchangeRate >= 0\n                    ? row.profitAndLoss.toLocaleString()\n                    : \"-\"}\n                </StyledCell>\n              </TableRow>\n            );\n          })}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n};\n\nexport default TableContent;\n","import React, { useState } from \"react\";\nimport { useForm, Controller } from \"react-hook-form\";\nimport {\n  TextField,\n  FormLabel,\n  FormControlLabel,\n  Radio,\n  RadioGroup,\n  Button,\n} from \"@material-ui/core\";\nimport styled from \"styled-components\";\nimport TableContent from \"../molecules/TableContent\";\n\nconst Title = styled.h1`\n  margin: 3rem auto;\n  font-weight: 500;\n`;\n\nconst Form = styled.form`\n  margin-top: 50px;\n  margin-bottom: 50px;\n`;\n\nconst FormContainer = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n`;\n\nconst FieldContainer = styled.div`\n  margin-right: 30px;\n  margin-bottom: 30px;\n`;\n\nconst ErrorContainer = styled.div`\n  font-size: 12px;\n  color: red;\n  margin-top: 10px;\n  margin-bottom: 10px;\n`;\n\nconst RequiredContainer = styled.div`\n  display: inline-flex;\n  border: solid 1px rgba(224, 224, 224, 1);\n  border-radius: 5px;\n  padding: 30px 50px;\n  margin-bottom: 30px;\n`;\n\nconst RequiredText = styled.div`\n  margin-right: 100px;\n`;\n\nconst TableContainer = styled.div`\n  margin-bottom: 50px;\n`;\n\ntype FormData = {\n  depositeMargin: number;\n  execRate: number;\n  quantity: number;\n  leverage: number;\n  position: string;\n};\n\ninterface Data {\n  marginRate: number;\n  exchangeRate: number;\n  profitAndLoss: number;\n}\n\nconst radioList: string[] = [\"買い\", \"売り\"];\n\nconst calcExchangeRate = (\n  position: string,\n  marginRate: number,\n  leverage: number,\n  execRate: number,\n  depositeMargin: number,\n  quantity: number\n) => {\n  let exchangeRate: number;\n  let profitAndLoss: number;\n\n  if (position === radioList[0]) {\n    exchangeRate =\n      Math.round(\n        ((1.0 + marginRate / leverage) * execRate - depositeMargin / quantity) *\n          100\n      ) / 100;\n    profitAndLoss = Math.floor((exchangeRate - execRate) * quantity);\n  } else {\n    exchangeRate =\n      Math.round(\n        ((1.0 - marginRate / leverage) * execRate + depositeMargin / quantity) *\n          100\n      ) / 100;\n    profitAndLoss = Math.floor((execRate - exchangeRate) * quantity);\n  }\n\n  return {\n    exchangeRate,\n    profitAndLoss,\n  };\n};\n\nconst Margin: React.FC = () => {\n  const marginRateList = [0.3, 0.5, 1.0, 2.0];\n  const [data, setData] = useState<Data[]>([\n    { marginRate: 0.3, exchangeRate: -1, profitAndLoss: -1 },\n    { marginRate: 0.5, exchangeRate: -1, profitAndLoss: -1 },\n    { marginRate: 1.0, exchangeRate: -1, profitAndLoss: -1 },\n    { marginRate: 2.0, exchangeRate: -1, profitAndLoss: -1 },\n  ]);\n  const [required, setRequired] = useState<number>(0);\n  const { register, handleSubmit, control, errors } = useForm<FormData>();\n  const onSubmit = handleSubmit(\n    ({ depositeMargin, execRate, quantity, leverage, position }) => {\n      const tmpData: Data[] = [];\n      marginRateList.map((marginRate) => {\n        const { exchangeRate, profitAndLoss } = calcExchangeRate(\n          position,\n          marginRate,\n          leverage,\n          execRate,\n          depositeMargin,\n          quantity\n        );\n\n        tmpData.push({\n          marginRate,\n          exchangeRate,\n          profitAndLoss,\n        });\n      });\n      setData(tmpData);\n\n      const req: number = Math.ceil((execRate * quantity) / leverage);\n      setRequired(req);\n    }\n  );\n\n  return (\n    <>\n      <Title>証拠金維持率計算</Title>\n      <Form onSubmit={onSubmit}>\n        <FormContainer>\n          <FieldContainer>\n            <TextField\n              inputRef={register({ required: true })}\n              label=\"預入証拠金\"\n              name=\"depositeMargin\"\n              variant=\"outlined\"\n              type=\"number\"\n            />\n            <ErrorContainer>\n              {errors.depositeMargin && <div>数値を入力してください</div>}\n            </ErrorContainer>\n          </FieldContainer>\n\n          <FieldContainer>\n            <TextField\n              inputRef={register({ required: true })}\n              label=\"約定レート\"\n              name=\"execRate\"\n              variant=\"outlined\"\n              type=\"number\"\n            />\n            <ErrorContainer>\n              {errors.execRate && <div>数値を入力してください</div>}\n            </ErrorContainer>\n          </FieldContainer>\n\n          <FieldContainer>\n            <TextField\n              inputRef={register({ required: true })}\n              label=\"取引数量\"\n              name=\"quantity\"\n              variant=\"outlined\"\n              type=\"number\"\n            />\n            <ErrorContainer>\n              {errors.quantity && <div>数値を入力してください</div>}\n            </ErrorContainer>\n          </FieldContainer>\n\n          <FieldContainer>\n            <TextField\n              inputRef={register({ required: true })}\n              label=\"レバレッジ\"\n              name=\"leverage\"\n              variant=\"outlined\"\n              type=\"number\"\n            />\n            <ErrorContainer>\n              {errors.leverage && <div>数値を入力してください</div>}\n            </ErrorContainer>\n          </FieldContainer>\n        </FormContainer>\n\n        <FieldContainer>\n          <FormLabel>ポジション</FormLabel>\n          <Controller\n            name=\"position\"\n            as={\n              <RadioGroup row>\n                {radioList.map((item) => (\n                  <FormControlLabel\n                    key={item}\n                    value={item}\n                    control={<Radio color=\"default\" />}\n                    label={item}\n                  />\n                ))}\n              </RadioGroup>\n            }\n            control={control}\n            defaultValue={radioList[0]}\n          />\n        </FieldContainer>\n\n        <Button type=\"submit\" variant=\"outlined\" color=\"primary\" size=\"large\">\n          計算\n        </Button>\n      </Form>\n\n      <RequiredContainer>\n        <RequiredText>取引必要証拠金</RequiredText>\n        <div>{required > 0 ? required.toLocaleString() : \"-\"} 円</div>\n      </RequiredContainer>\n\n      <TableContainer>\n        <TableContent rows={data} />\n      </TableContainer>\n    </>\n  );\n};\n\nexport default Margin;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst Title = styled.h1`\n  margin: 3rem auto;\n  font-weight: 500;\n`;\n\nconst MarginDocument: React.FC = () => {\n  return (\n    <>\n      <Title>計算方法</Title>\n    </>\n  );\n};\n\nexport default MarginDocument;\n","import React from \"react\";\nimport Navigation from \"./components/molecules/Navigation\";\nimport Margin from \"./components/pages/Margin\";\nimport MarginDocument from \"./components/pages/MarginDocument\";\nimport styled from \"styled-components\";\nimport { StylesProvider } from \"@material-ui/styles\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport { device } from \"./styles\";\n\nconst Enclosure = styled.div`\n  @media ${device.laptop} {\n    display: grid;\n    position: relative;\n    grid-template-columns: 240px 1fr;\n    grid-template-rows: auto;\n  }\n`;\n\nconst Nav = styled.div`\n  border-bottom: solid 1px rgba(224, 224, 224, 1);\n\n  @media ${device.laptop} {\n    display: block;\n    position: fixed;\n    top: 0;\n    width: 240px;\n    overflow-y: auto;\n    height: 100%;\n    grid-column: 1/2;\n    overscroll-behavior: contain;\n    border-right: solid 1px rgba(224, 224, 224, 1);\n  }\n`;\n\nconst NavContainer = styled.div`\n  padding: 16px;\n\n  @media ${device.laptop} {\n    padding: 40px 30px;\n  }\n`;\n\nconst Main = styled.main`\n  @media ${device.laptop} {\n    width: 100%;\n    display: block;\n    grid-column: 2/3;\n    overflow: hidden;\n  }\n`;\n\nconst MainContainer = styled.div`\n  margin-right: 16px;\n  margin-left: 16px;\n\n  @media ${device.laptop} {\n    margin-left: 40px;\n    margin-right: 40px;\n  }\n`;\n\nconst App: React.FC = () => {\n  return (\n    <StylesProvider injectFirst>\n      <Router>\n        <Enclosure>\n          <Nav>\n            <NavContainer>\n              <Navigation />\n            </NavContainer>\n          </Nav>\n\n          <Main>\n            <MainContainer>\n              <Switch>\n                <Route path=\"/margin-sample\" exact>\n                  <Margin />\n                </Route>\n                <Route path=\"/margin-sample/document\">\n                  <MarginDocument />\n                </Route>\n              </Switch>\n            </MainContainer>\n          </Main>\n        </Enclosure>\n      </Router>\n    </StylesProvider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}