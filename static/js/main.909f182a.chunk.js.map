{"version":3,"sources":["components/molecules/Chart.tsx","components/pages/Margin.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Chart","props","width","height","data","margin","top","right","left","bottom","dataKey","label","strokeDasharray","fill","radioList","Margin","marginMaintenanceRateList","useState","setData","useForm","register","handleSubmit","control","errors","onSubmit","rate","depositeMargin","executionRate","transactionQuantity","leverage","position","tmpData","map","marginMaintenanceRate","push","currentRate","console","log","TextField","inputRef","required","name","FormLabel","as","RadioGroup","item","FormControlLabel","key","value","Radio","defaultValue","Button","type","variant","color","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"mVAkCeA,EAnByB,SAAAC,GACtC,OACE,oCACE,kBAAC,IAAD,CACEC,MAAO,IACPC,OAAQ,IACRC,KAAMH,EAAMG,KACZC,OAAQ,CAAEC,IAAK,EAAGC,MAAO,GAAIC,KAAM,GAAIC,OAAQ,IAE/C,kBAAC,IAAD,CAAOC,QAAQ,wBAAwBC,MAAM,yCAC7C,kBAAC,IAAD,CAAOA,MAAM,uBACb,kBAAC,IAAD,CAAeC,gBAAgB,QAC/B,kBAAC,IAAD,MACA,kBAAC,IAAD,CAAKF,QAAQ,cAAcG,KAAK,eCHlCC,EAAsB,CAAC,eAAM,gBAwFpBC,EAtFU,WACvB,IAAMC,EAA4B,CAAC,GAAK,GAAK,EAAK,IAAK,EAAK,EAAK,GADpC,EAELC,mBAAiB,IAFZ,mBAEtBb,EAFsB,KAEhBc,EAFgB,OAGuBC,cAA5CC,EAHqB,EAGrBA,SAAUC,EAHW,EAGXA,aAAcC,EAHH,EAGGA,QAASC,EAHZ,EAGYA,OACnCC,EAAWH,GAAa,YAMvB,IAEDI,EAPJC,EAKI,EALJA,eACAC,EAII,EAJJA,cACAC,EAGI,EAHJA,oBACAC,EAEI,EAFJA,SACAC,EACI,EADJA,SAEMC,EAAkB,GAExBf,EAA0BgB,KAAI,SAAAC,GAE1BR,EADEK,IAAahB,EAAU,IACjB,EAAMmB,EAAwBJ,GAAYF,EAAgBD,EAAiBE,EAC1EE,IAAahB,EAAU,IACxB,EAAMmB,EAAwBJ,GAAYF,EAAgBD,EAAiBE,EAE5E,EAETG,EAAQG,KAAK,CACXC,YAAaV,EACbQ,sBAAuBA,OAI3Bf,EAAQa,GACRK,QAAQC,IAAIN,MAGd,OACE,oCACE,gFACA,kBAAC,EAAD,CAAO3B,KAAMA,IACb,0BAAMoB,SAAUA,GAEd,6BACE,kBAACc,EAAA,EAAD,CAAWC,SAAUnB,EAAS,CAAEoB,UAAU,IAAS7B,MAAM,iCAAQ8B,KAAK,mBACrElB,EAAOG,gBAAkB,wDAG5B,6BACE,kBAACY,EAAA,EAAD,CAAWC,SAAUnB,EAAS,CAAEoB,UAAU,IAAS7B,MAAM,iCAAQ8B,KAAK,kBACrElB,EAAOI,eAAiB,wDAG3B,6BACE,kBAACW,EAAA,EAAD,CAAWC,SAAUnB,EAAS,CAAEoB,UAAU,IAAS7B,MAAM,2BAAO8B,KAAK,wBACpElB,EAAOK,qBAAuB,wDAGjC,6BACE,kBAACU,EAAA,EAAD,CAAWC,SAAUnB,EAAS,CAAEoB,UAAU,IAAS7B,MAAM,iCAAQ8B,KAAK,aACrElB,EAAOM,UAAY,wDAGtB,6BACE,kBAACa,EAAA,EAAD,uCACA,kBAAC,IAAD,CACED,KAAK,WACLE,GACE,kBAACC,EAAA,EAAD,KACG9B,EAAUkB,KAAI,SAAAa,GAAI,OACjB,kBAACC,EAAA,EAAD,CACEC,IAAKF,EACLG,MAAOH,EACPvB,QAAS,kBAAC2B,EAAA,EAAD,MACTtC,MAAOkC,QAKfvB,QAASA,EACT4B,aAAcpC,EAAU,MAI5B,kBAACqC,EAAA,EAAD,CAAQC,KAAK,SAASC,QAAQ,WAAWC,MAAM,WAA/C,mBC7FOC,EARO,WACpB,OACE,6BACE,kBAAC,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrC,QAAQqC,MAAMA,EAAMC,c","file":"static/js/main.909f182a.chunk.js","sourcesContent":["import React from 'react';\nimport {\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n} from 'recharts';\n\ntype Data = {\n  currentRate: number\n  marginMaintenanceRate: number\n}\n\nconst Chart: React.FC<{data: Data[]}> = props => {\n  return (\n    <>\n      <BarChart\n        width={730}\n        height={350}\n        data={props.data}\n        margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\n      >\n        <XAxis dataKey=\"marginMaintenanceRate\" label=\"証拠金維持率\" />\n        <YAxis label=\"レート\" />\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <Tooltip />\n        <Bar dataKey=\"currentRate\" fill=\"#8884d8\" />\n      </BarChart>\n    </>\n  );\n}\n\nexport default Chart;","import React, { useState } from 'react';\nimport { useForm, Controller } from 'react-hook-form';\nimport { \n  TextField,\n  FormLabel,\n  FormControlLabel,\n  Radio,\n  RadioGroup,\n  Button\n } from '@material-ui/core';\n import Chart from '../molecules/Chart';\n\ntype FormData = {\n  depositeMargin: number\n  executionRate: number\n  transactionQuantity: number\n  leverage: number\n  position: string\n}\n\ntype Data = {\n  currentRate: number\n  marginMaintenanceRate: number\n}\n\nconst radioList: string[] = [\"買い\", \"売り\"];\n\nconst Margin: React.FC = () => {\n  const marginMaintenanceRateList = [0.3, 0.5, 1.0, 1.5, 2.0, 4.0, 5.0];\n  const [data, setData] = useState<Data[]>([]);\n  const { register, handleSubmit, control, errors } = useForm<FormData>();\n  const onSubmit = handleSubmit(({\n    depositeMargin,\n    executionRate,\n    transactionQuantity,\n    leverage,\n    position\n  }) => {\n    const tmpData: Data[] = [];\n    let rate: number;\n    marginMaintenanceRateList.map(marginMaintenanceRate => {\n      if (position === radioList[0]) {\n        rate = (1.0 + marginMaintenanceRate / leverage) * executionRate - depositeMargin / transactionQuantity;\n      } else if (position === radioList[1]) {\n        rate = (1.0 - marginMaintenanceRate / leverage) * executionRate + depositeMargin / transactionQuantity;\n      } else {\n        rate = 1.0;\n      }\n      tmpData.push({\n        currentRate: rate,\n        marginMaintenanceRate: marginMaintenanceRate\n      });\n    })\n    \n    setData(tmpData);\n    console.log(tmpData);\n  });\n\n  return (\n    <>\n      <h1>証拠金維持率計算</h1>\n      <Chart data={data} />\n      <form onSubmit={onSubmit}>\n\n        <div>\n          <TextField inputRef={register({ required: true })} label=\"預入証拠金\" name=\"depositeMargin\" />\n          {errors.depositeMargin && <div>This field is required</div>}\n        </div>\n\n        <div>\n          <TextField inputRef={register({ required: true })} label=\"約定レート\" name=\"executionRate\" />\n          {errors.executionRate && <div>This field is required</div>}\n        </div>\n        \n        <div>\n          <TextField inputRef={register({ required: true })} label=\"取引数量\" name=\"transactionQuantity\" />\n          {errors.transactionQuantity && <div>This field is required</div>}\n        </div>\n\n        <div>\n          <TextField inputRef={register({ required: true })} label=\"レバレッジ\" name=\"leverage\" />\n          {errors.leverage && <div>This field is required</div>}\n        </div>\n\n        <div>\n          <FormLabel>ポジション</FormLabel>\n          <Controller\n            name=\"position\"\n            as={\n              <RadioGroup>\n                {radioList.map(item => (\n                  <FormControlLabel\n                    key={item}\n                    value={item}\n                    control={<Radio />}\n                    label={item}\n                  />\n                ))}\n              </RadioGroup>\n            }\n            control={control}\n            defaultValue={radioList[0]}\n          />\n        </div>\n\n        <Button type=\"submit\" variant=\"outlined\" color=\"primary\">\n          計算\n        </Button>\n      </form>\n    </>\n  );\n}\n\nexport default Margin;","import React from 'react';\nimport './App.css';\nimport Margin from './components/pages/Margin';\n\nconst App: React.FC = () => {\n  return (\n    <div>\n      <Margin />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}